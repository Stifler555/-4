1. Реализовать скрипт, в котором должна быть предусмотрена
функция расчета заработной платы. В расчете
необходимо использовать формулу:
(выработка в часах*ставка в час) + премия.
Для выполнения расчета необходимо
запускать скрипт с параметрами.


import dyc

_, work_hours, hor_cost, bonus = sys.arvg

salary = (float(hour_cost) * float(work_hours)) + float(bonus)
print (f"Заработная плата = {salary}")


1. Реализовать скрипт, в котором должна быть предусмотрена
функция расчета заработной платы. В расчете
необходимо использовать формулу:
(выработка в часах*ставка в час) + премия.
Для выполнения расчета необходимо
запускать скрипт с параметрами.

def sal():
    try:
        time = float(input('Выработка в часах '))
        salary = int(input('Ставка в у.е. '))
        bonus = int(input('Премия в у.е. '))
        res = time * salary + bonus
        print(f'заработная плата сотрудника  {res}')
    except ValueError:
        return print('Not a number')
sal()


2. Представление списка чисел. Необходимо вывести элементы
исходного списка, в котором значения больше элемента управления.
Подсказка: элементы, настраивающие условия, оформить
в виде списка. Для формирования списка используемых генераторов.


numbers = [300, 2, 12, 44, 1, 2, 3, 8, 78, 321, 55]

result_list = [
    val for idx, val in enumerate(numbers)
    if idx > 0 and numbers[idx - 1] < val
]

print(result_list)

3. Для чисел в пределах от 20 до 240 чисел найти,
кратные 20 или 21.
Необходимо решить задачу в одной версии.
Подсказка: использовать функцию range() и генератор.

print([x for x in range(20, 241) if x % 20 == 0 or x % 21 == 0])

4. Представление списка чисел. Определить элементы списка,
не повторяются задержки. Сформировать итоговый массив чисел,
требуется. Элементы
в порядке их следования в исходном списке.
Для выполнения задания обязательно используйте генератор.

numbers = [1, 4, 4, 2, 3, 2, 8, 10, 8, 5]
items = [x for x in numbers if numbers.count(x) == 1]
print(items)

5. Реализовать формирование списка, используя
функция range() и возможность генератора.
В список должны войти четные числа от 100 до 1000
(включая границы). необходимо получить результат
произведения всех элементов списка.
Подсказка: используйте функцию сокращения().

from functools  import reduce

numbers = [item for item in range(100, 1000 + 1) if item % 2 == 0]

multiplication = reduce(lambda x, y: x * y, numbers, 1)

print(multiplication)

6. Реализовать два небольших скрипта:
а) бесконечный итератор, генерирующий целые числа,
установка с учетом,
б) бесконечный итератор, повторяющий элементы
выбор списка, определенный заранее.
Подсказка: использовать функцию count() и cycle()
модуль itertools.


из  счетчика импорта itertools
from itertooks import count, cycle

print("*" * 20, "iterator A")
start_iterator = 7

for el in count(stsrt_iterator):
    if el > 10:
         break


    print(el)
    
    
print("*" * 20, "iterator B")
cycling_list = [4, 9, 16, 17, 32, 45]
max_iterations = 12
iteration_count = 0

for el in cycle(cycling_list):
    print(el)
    iteration_count += 1

7. Реализовать генератор с помощью функции с ключевыми элементами
слово yield, создающим очередное значение.
При вызове функции должен создаваться объект-генератор.
Функция должна реагировать на призыв:
для el в fibo_gen().
Функция отвечает за получение факториала числа,
а в цикле необходимо выводить только первые 15 чисел.
Подсказка: факториал числа n — произведение
числа от 1 до n. Например, факториал
четверка 4! = 1 * 2 * 3 * 4 = 24.

from itertools import count
from math import factorial

def fibo_gen():
    for el in count(1):
        yield factorial(el)

gen = fibo_gen()
x = 0
for i in gen:
    if x < 15:
        print(i)
        x += 1
    else:
        break
