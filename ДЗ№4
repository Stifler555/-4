1. Реализовать скрипт, в котором должна быть предусмотрена
функция расчета заработной платы. В расчете
необходимо использовать формулу:
(выработка в часах*ставка в час) + премия.
Для выполнения расчета необходимо
запускать скрипт с параметрами.


из  системного  импорта  argv

from sys import argv

name, time, salary, bonus = argv
try:
    time = int(time)
    salary = int(salary)
    bonus = int(bonus)
    res = time * salary + bonus
    print(f'заработная плата сотрудника  {res}')
except ValueError:
    print('Not a number')


1. Реализовать скрипт, в котором должна быть предусмотрена
функция расчета заработной платы. В расчете
необходимо использовать формулу:
(выработка в часах*ставка в час) + премия.
Для выполнения расчета необходимо
запускать скрипт с параметрами.

def sal():
    try:
        time = float(input('Выработка в часах '))
        salary = int(input('Ставка в у.е. '))
        bonus = int(input('Премия в у.е. '))
        res = time * salary + bonus
        print(f'заработная плата сотрудника  {res}')
    except ValueError:
        return print('Not a number')
sal()


2. Представление списка чисел. Необходимо вывести элементы
исходного списка, в котором значения больше элемента управления.
Подсказка: элементы, настраивающие условия, оформить
в виде списка. Для формирования списка используемых генераторов.


my_list = [15, 2, 3, 1, 7, 5, 4, 10]
my_new_list = [el for num, el in enumerate(my_list) if my_list[num - 1] < my_list[num]]
print(f'Исходный список {my_list}')
print(f'Новый список {my_new_list}')

3. Для чисел в пределах от 20 до 240 чисел найти,
кратные 20 или 21.
Необходимо решить задачу в одной версии.
Подсказка: использовать функцию range() и генератор.

print(f'Числа от 20 до 240 кратные 20 или 21 - {[el for el in range(20, 241) if el % 20 == 0 or el % 21 == 0]}')

4. Представление списка чисел. Определить элементы списка,
не повторяются задержки. Сформировать итоговый массив чисел,
требуется. Элементы
в порядке их следования в исходном списке.
Для выполнения задания обязательно используйте генератор.


my_list = [1, 4, 4, 2, 3, 2, 8, 10, 8, 5]
my_new_list = [el for el in my_list if my_list.count(el) < 2]
print(my_new_list)

5. Реализовать формирование списка, используя
функция range() и возможность генератора.
В список должны войти четные числа от 100 до 1000
(включая границы). необходимо получить результат
произведения всех элементов списка.
Подсказка: используйте функцию сокращения().


из  functools  импортировать  уменьшить


from functools import reduce


def my_func(el_p, el):
    return el_p * el

print(f'Список четных значений {[el for el in range(99, 1001) if el % 2 == 0]}')
print(f'Результат перемножения всех элементов списка {reduce(my_func, [el for el in range(99, 1001) if el % 2 == 0])}')


6. Реализовать два небольших скрипта:
а) бесконечный итератор, генерирующий целые числа,
установка с учетом,
б) бесконечный итератор, повторяющий элементы
выбор списка, определенный заранее.
Подсказка: использовать функцию count() и cycle()
модуль itertools.


из  счетчика импорта itertools

for  from itertools import count

for el in count(int(input('Введите стартовое число '))):
    print(el) # внимание - беконечный цикл!

from itertools import cycle

my_list = [True, 'ABC', 123, None]
for el in cycle(my_list):
    print(el)


7. Реализовать генератор с помощью функции с ключевыми элементами
слово yield, создающим очередное значение.
При вызове функции должен создаваться объект-генератор.
Функция должна реагировать на призыв:
для el в fibo_gen().
Функция отвечает за получение факториала числа,
а в цикле необходимо выводить только первые 15 чисел.
Подсказка: факториал числа n — произведение
числа от 1 до n. Например, факториал
четверка 4! = 1 * 2 * 3 * 4 = 24.

from itertools import count
from math import factorial

def fibo_gen():
    for el in count(1):
        yield factorial(el)

gen = fibo_gen()
x = 0
for i in gen:
    if x < 15:
        print(i)
        x += 1
    else:
        break
